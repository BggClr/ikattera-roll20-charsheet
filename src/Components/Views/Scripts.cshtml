@model string

<script type="text/worker">
	const CharsheetData = JSON.parse('@Html.Raw(Model)');
	const FeaturesList = ['attributes', 'skills'];
	const buttonList = ['character', 'attributes', 'skills', 'weapons', 'combat'];

	Array.prototype.distinct = function() {
		return this.filter((item, pos) => this.indexOf(item) === pos)
    };

	function findFeature(featureName) {
		return FeaturesList
        	.reduce((agg, key) => [...agg, ...CharsheetData[key]], [])
        	.filter(f => f.name == featureName)[0];
	}

	async function rollDice(dice, featureName, altKey) {
		getAttrs(getValuesListForCalculate(), async values => {
			const feature = findFeature(featureName);
			let modifiers = [
				featureName,
				`${featureName}_mod`
			];

			if (feature && feature.depends_on) {
				const greatestFeature = feature.depends_on
					.map(p => ({feature: p, value: (parseInt(values[p]) || 0) + (parseInt(values[`${p}_mod`]) || 0)}))
					.sort((a, b) => b.value - a.value)[0].feature;
				modifiers = [...modifiers, greatestFeature, `${greatestFeature}_mod`];
			}
			const rollResultModifiers = modifiers.map(p => `@@{${p}}`).join(' + ');
			const rollModifier = !!altKey ? '/w gm': '';

			const roll = `${rollModifier} &{template:default} {{name=@@{character_name}}} {{Проверка=${feature.title}}} {{Результат=[[${dice} + ${rollResultModifiers}]]}}`;
			const results = await startRoll(roll);
			finishRoll(results.rollId);
			console.log(results.results.result['Результат']);
		});
	}

	function getCharsheetFeatures() {
		return CharsheetData.attributes
			.concat(CharsheetData.skills);
	}

	function getFeaturesValuesByType(data, level) {
		if (!data || !data.level_bonus) {
        	return 0;
        }

        return Object
        	.keys(data.level_bonus)
        	.filter(l => parseInt(l) > 0 && parseInt(l) <= level)
        	.reduce((agg, key) => Object.keys(agg).concat(Object.keys(data.level_bonus[key]))
        		    .distinct()
        			.reduce((levelAgg, levelKey) => ({...levelAgg, [levelKey]: (agg[levelKey] || 0) + (data.level_bonus[key][levelKey] || 0)}), {})
        	, {});
	}

	function getFeaturesValues(values, level) {
		level = level || values.level || 0;
    	const race = CharsheetData.races.find(r => r.name === values.race);
    	const characterClass = CharsheetData.classes.find(r => r.name === values.class);
    	const kind = !!race ? (race.kinds && race.kinds.find(k => k.name === values.kind)) : null;
    	const subclass = !!characterClass ? (characterClass.subclasses && characterClass.subclasses.find(k => k.name === values.subclass)) : null;

		const featureChangesByType = [CharsheetData, race, kind, characterClass, subclass].map(data => getFeaturesValuesByType(data, level));
		const keys = featureChangesByType
			.map(p => Object.keys(p))
			.reduce((agg, keys) => [...agg, ...keys], [])
			.distinct();

		return keys
			.reduce((agg, key) => ({...agg, [key]: featureChangesByType.reduce((featureValueAgg, features) => featureValueAgg + (features[key] || 0), 0) }), {})
	}

	function calculateFeatures(values, oldValues, level) {
		const newFeatures = getFeaturesValues(values, level);
		const oldFeatures = !!oldValues ? getFeaturesValues(oldValues, level) : {};
		const charsheetFeatures = getCharsheetFeatures();

		const pickedFeatures = 	FeaturesList
            .map(key => ({name: `${key}_free`, value: CharsheetData[key].reduce((agg, p) => (agg + (!!values[p.name] ? parseInt(values[p.name]) - (!!oldValues ? (oldFeatures[p.name] || 0) : (newFeatures[p.name] || 0)) : 0)), 0)}))
            .reduce((agg, f) => ({...agg, [f.name]: f.value}), {});

		const featuresDelta = Object.keys(newFeatures)
			.concat(Object.keys(oldFeatures))
			.concat(Object.keys(pickedFeatures))
			.distinct()
			.reduce((agg, key) => ({
				...agg,
				[key]: charsheetFeatures.filter(p => p.name === key).length
					? (newFeatures[key] || 0) - (oldFeatures[key] || 0)
					: (newFeatures[key] || 0) - (pickedFeatures[key] || 0)
			}), {});

		return featuresDelta;
	}

	function getValuesListForCalculate(attrs) {
		return FeaturesList
			.map(key => CharsheetData[key].map(f => f.name).reduce((agg, f) => [...agg, f, `${f}_mod`], []))
			.reduce((agg, f) => [...agg, ...f], [...FeaturesList.map(f => `${f}_free`),...(!!attrs ? attrs : []), 'level', 'race', 'kind', 'class', 'subclass']);
	}

	function getNotificationClass(value) {
		if (!value) {
			return 'bg-secondary';
		}
		return value > 0 ? 'bg-success' : 'bg-danger';
	}

	function applyTabStyles() {
		getAttrs(FeaturesList.map(f => `${f}_free`), values => {
			FeaturesList.forEach(f => {
				$20(`[name="attr_${f}_free"]`)
                    .removeClass('bg-secondary bg-success bg-danger')
                    .addClass(getNotificationClass(values[`${f}_free`]));
			});
		});
	}

	function init() {
		getAttrs(getValuesListForCalculate(), values => {
        	var featuresDelta = calculateFeatures(values, null, values.level || CharsheetData.level);

			const defaultFeatures = getCharsheetFeatures()
        		.reduce((agg, feature) => ({...agg, [feature.name]: feature.value + (featuresDelta[feature.name] || 0), [`${feature.name}_mod`]: 0}), {});

			const featuresToSet = Object.keys(defaultFeatures)
				.filter(key => values[key] == null || values[key] === '')
				.reduce((agg, key) => ({...agg, [key]: defaultFeatures[key]}), {});

			const attrs = FeaturesList
				.reduce((agg, key) => {
					if (!featuresDelta[`${key}_free`]) {
						return agg;
					}
					return {
						...agg,
						[`${key}_free`]: featuresDelta[`${key}_free`]
					};
				}, {...featuresToSet, level: values.level || CharsheetData.level});
			setAttrs(attrs, {silent: true});
			applyTabStyles();
		});
	}

	function applyFeatureChanges(values, oldValues, level) {
		const featuresDelta = calculateFeatures(values, oldValues, level || values.level);
		const charsheetFeatures = getCharsheetFeatures().map(f => f.name);

		const featuresFree = FeaturesList
			.filter(key => !!featuresDelta[`${key}_free`])
			.reduce((agg, key) => ({...agg, [`${key}_free`]: featuresDelta[`${key}_free`]}), {})

		const attrs = Object
			.keys(featuresDelta)
			.filter(key => charsheetFeatures.indexOf(key) >= 0)
			.reduce((agg, key) => ({...agg, [key]: (parseInt(values[key]) || 0) + featuresDelta[key]}), featuresFree)

		setAttrs(attrs, {silent: true});

		applyTabStyles();
	}

	function fillKinds(raceName) {
		const race = CharsheetData.races.filter(p => p.name == raceName)[0];
		if (race && race.kinds) {
			populateListOptions({
                elemSelector: '#form_kind',
                optionsArray: [
                    {label: 'Выберите вид', value: 'none', disabled: true, selected: true},
                    ...race.kinds.sort((a, b) => a.title.localeCompare(b.title)).map(k => ({label: k.title, value: k.name}))
                ]
            });
			$20('.js-group-kind').removeClass('hidden');
		} else {
        	$20('.js-group-kind').addClass('hidden');
		}
	}
	function fillSubClasses(className) {
		const characterClass = CharsheetData.classes.filter(p => p.name == className)[0];
		if (characterClass && characterClass.subclasses) {
			populateListOptions({
                elemSelector: '#form_subclass',
                optionsArray: [
                    {label: 'Выберите подкласс', value: 'none', disabled: true, selected: true},
                    ...characterClass.subclasses.sort((a, b) => a.title.localeCompare(b.title)).map(k => ({label: k.title, value: k.name}))
                ]
            });
			$20('.js-group-subclass').removeClass('hidden');
		} else {
        	$20('.js-group-subclass').addClass('hidden');
		}
	}

	on('sheet:opened', async function () {
		setAttrs({
			sheetTab: 'character'
		});
		getAttrs(['race', 'class', 'level'], function(values) {
			if (values.level < 3) {
				setAttrs({
					subclass: 'none'
				});
				$20('.js-group-subclass').addClass('disabled');
			}
			fillKinds(values.race);
			fillSubClasses(values.class)
		});
		init();
	});

	buttonList.forEach(button => {
    	on(`clicked:${button}`, function() {
    		$20('.nav-link').removeClass('active');
    		$20(`button[name='act_${button}']`).addClass('active');
    		setAttrs({
    			sheetTab: button
    		});
    	});
    });

	FeaturesList
		.reduce((agg, key) => [...agg, ...CharsheetData[key]], [])
		.forEach(feature => {
			on(`change:${feature.name}`, e => {
				if (e.sourceType === 'sheetworker') {
					return;
				}

				getAttrs(getValuesListForCalculate(), values => {
					const oldValues = e.previousValue && e.previousValue != e.newValue
        				? {...values, [feature.name]: e.previousValue}
        				: {...values, [feature.name]: 0};
					applyFeatureChanges(values, oldValues);
				});
			});
		});

	on('change:level', e => {
		const currentLevel = parseInt(e.newValue);

		getAttrs(getValuesListForCalculate(), values => {
			const oldValues = e.previousValue && e.previousValue != e.newValue
        		? {...values, level: e.previousValue}
        		: {...values, level: 0};
			applyFeatureChanges(values, oldValues);
		});

		if (currentLevel < 3) {
			setAttrs({
				subclass: 'none'
			});
			$20('.js-group-subclass').addClass('disabled');
		} else {
			$20('.js-group-subclass').removeClass('disabled');
		}
	});

	on('change:race', e => {
		getAttrs(getValuesListForCalculate(), values => {
			setAttrs({ kind: 'none' }, { silent: true }, () => {
                const oldValues = e.previousValue && e.previousValue != e.newValue
                    ? {...values, race: e.previousValue, kind: values.kind}
                    : {...values, race: null, kind: null};
                applyFeatureChanges(values, oldValues);
            });
        });
        fillKinds(e.newValue);
	});

	on('change:class', e => {
		getAttrs(getValuesListForCalculate(), values => {
			setAttrs({ subclass: 'none' }, { silent: true }, () => {
                const oldValues = e.previousValue && e.previousValue != e.newValue
                    ? {...values, class: e.previousValue, subclass : values.subclass}
                    : {...values, class: null, subclass: null};
                applyFeatureChanges(values, oldValues);
            });
        });
        fillSubClasses(e.newValue);
	});

	on('change:kind', e => {
		if (e.sourceType === 'sheetworker') {
			return;
		}

		getAttrs(getValuesListForCalculate(), values => {
			const oldValues = e.previousValue && e.previousValue != e.newValue
				? {...values, kind: e.previousValue}
				: {...values, kind: 'none'};
			applyFeatureChanges(values, oldValues);
		});
	});

	$20('button.js-roll').on('click', async e => {
		await rollDice('2d10', e.htmlAttributes['data-name'], e.altKey);
	});
	$20('button.js-roll-adv').on('click', async e => {
		await rollDice('3d10kh2', e.htmlAttributes['data-name'], e.altKey);
	});
	$20('button.js-roll-dis').on('click', async e => {
		await rollDice('3d10kl2', e.htmlAttributes['data-name'], e.altKey);
	});
</script>
